//‡πÉ‡∏ä‡πâ UseParam ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ param ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ props *******************
import React from 'react'
import { useParams, Link, useNavigate } from "react-router-dom";
import { NavbarComponent } from "./NavbarComponent"
import { useState, useEffect } from "react"
import axios from "axios";
import Swal from 'sweetalert2'
import { getUser, getToken } from "../services/authService"


const TicketComponent = () => {
    //‡πÉ‡∏ä‡πâ UseParam ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ param ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ props ***********8
    let param = useParams();

    //‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ TicketState
    const [stateTicket, setStateTicket] = useState("")

    //<<<--------------------API----------------------------->>>>>>
    useEffect(() => {

        // ------GET ‡∏Ñ‡πà‡∏≤ Path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô NODE JS BackEnd-------------
        axios
            .get(`${process.env.REACT_APP_API}/tickets/${param.slug}`,

                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Token ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô headers
                {
                    headers: {
                        authorization: `Bearer ${getToken()}`
                    }
                }
            )
            // Data response Set ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ State..
            .then(api_res_data => { setStateTicket(api_res_data.data) })
            // ‡∏à‡∏±‡∏ö Error 
            .catch(err => alert(err))

        // ‡∏Å‡∏≤‡∏£ Scroll ‡πÑ‡∏õ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        window.scrollTo(0, 0)
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [])

    //---------------  ‡∏Å‡∏≤‡∏£  Confirm & Remove ---------------------------------------
    // Auto Redirect : ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Submit Form 
    const navigate = useNavigate()

    // 3- ‡∏Å‡∏≤‡∏£ Remove ---------------------------------------------------------------
    // 3-1 ‡∏Å‡∏≤‡∏£ Confrim ‡∏Å‡πà‡∏≠‡∏ô Remove  
    const confirmDelete = (slug) => {

        Swal.fire({
            title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ? ",
            icon: "warning",
            showCancelButton: true
        })
            .then((result) => {
                if (result.isConfirmed)  //‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö + param 
                    performRemove(slug)
            })
    }

    //3-2 << ========== ‡∏¢‡∏¥‡∏á API Delete data------------------>>>>>>>>>>>>>>
    const performRemove = (slug) => {

        axios
            .delete(`${process.env.REACT_APP_API}/tickets/${slug}`,
                // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Token ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô headers
                {
                    headers: {
                        authorization: `Bearer ${getToken()}`
                    }
                }
            )
            .then(response => {
                Swal.fire({ icon: 'success', title: response.data.message, })
                //fetchAllTickets();
                navigate('/')
            })
            .catch(err => alert(err))
    }


    //----------------------------------View--------------------------------
    return (
        <div className='container p-5'>
            <NavbarComponent />
            {/* <div>{JSON.stringify(param)}</div> */}
            <h3> ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤ | Title: {stateTicket.title}</h3>
            <hr></hr>
            <p>üí°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ | Status: {stateTicket.status}</p>
            <p className="text-muted"> ID : {stateTicket._id} # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏áüìÜ:{new Date(stateTicket.createdAt).toLocaleString()}</p>
            <p>üë¶‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á | Requester: {stateTicket.requester}
                # üèö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô | Department: {stateTicket.department} </p>
            <p>üìûüìß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö | Contact info: {stateTicket.contact}</p>

            <label>üìù‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ /‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£  | Issue / Request Content: :</label>
            <p>
                <textarea rows="3" disabled className="form-control"
                    value={stateTicket.content} />
            </p>

            <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ | Remark   | Issue / Request Content: :</label>
            <p>
                <textarea rows="3" disabled className="form-control"
                    value={stateTicket.remark} />
            </p>

            <hr></hr>
            <p style={{ color: "blue" }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á IT</p>
            <p>‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà IT ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö : {stateTicket.itstaff}</p>
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô:</label>
            <p>
                <textarea rows="3" disabled className="form-control"
                    value={stateTicket.itnote} />
            </p>

            {
                getUser() && (<Link className="btn btn-outline-success"
                    to={`/tickets/update/${stateTicket.slug}`}>Update | Edit</Link>)

            }
            <>&nbsp;</>
            {
                getUser() && (
                    <button className="btn btn-outline-danger"
                        onClick={() => confirmDelete(stateTicket.slug)}>Remove Ticket</button>)

            }
            <hr></hr>
        </div >

    )
}
export default TicketComponent